#!/usr/bin/env python

from __future__ import print_function

# standard dependencies
import argparse
import textwrap

# in-house modules
import lsst.sqre.jirakit
from lsst.sqre.jira2dot import jira2dot, attr_func, rank_func

# argument parsing and default options

parser = argparse.ArgumentParser(
    prog='dlp-graph',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent('''

    Generate a graph of LSST DLP JIRA project in GraphViz dot format.

    To export to e.g. SVG, pipe to the dot utility:

        dlp-graph | dot -T svg > foot.svg

    There are other dot output formats, but SVG is particularly useful in that it
    can be loaded directly by most web browsers, which lets you follow the links
    embedded in the graph.
    '''),
    epilog='Part of jirakit: https://github.com/lsst-sqre/sqre-jirakit'
)

parser.add_argument('-s', '--server',
                    default=lsst.sqre.jirakit.SERVER,
                    help='JIRA server URL')
parser.add_argument('-w', '--where',
                    default=None,
                    help='WHERE filter (e.g. "wbs ~ 02C.04.03") to include in query query')

parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.5')

opt = parser.parse_args()

query = '(project = DLP AND (issuetype = Milestone OR issuetype = "Meta-epic"))'

if opt.where:
    query = "{0} AND {1}".format(opt.where, query)

jira2dot(opt.server, query, attr_func=attr_func, diag_name="DLP Roadmap", rank_func=rank_func,
         ranks=lsst.sqre.jirakit.cycles())
