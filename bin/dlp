#!/usr/bin/env python

import argparse
import sys
import textwrap

import lsst.sqre.jirakit as jirakit
from lsst.sqre.jira2txt import jira2txt
from lsst.sqre.jira2dot import jira2dot, attr_func, rank_func
from lsst.sqre.jiraserver import build_server

DEFAULT_WBS = "02*"

def generate_txt(opts):
    issues = jirakit.get_issues(opts.server, jirakit.build_query(('Milestone',), opts.wbs))
    return jira2txt(issues, csv=True if opts.mode == "csv" else False, show_key=opts.key,
                    show_title=opts.title, url_base = '' if opts.no_url else opts.server + "browse/")

def generate_dot(opts):
    issues = jirakit.get_issues(opts.server,
                                jirakit.build_query(('Milestone', 'Meta-epic'), opts.wbs))
    return jira2dot(issues, attr_func=attr_func, diag_name="DLP Roadmap",
                    rank_func=rank_func, ranks=jirakit.cycles())

def check_sanity(opts):
    issues = jirakit.get_issues(opts.server,
                                jirakit.build_query(('Milestone', 'Meta-epic'), opts.wbs))
    if jirakit.check_sanity(issues):
        sys.exit(1)

def run_server(opts):
    build_server().run(host=opts.host, port=opts.port)

parser = argparse.ArgumentParser(epilog="LSST jirakit: https://github.com/lsst-sqre/sqre-jirakit")
parser.add_argument('-s', '--server', default=jirakit.SERVER)
parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.5')

subparsers = parser.add_subparsers(dest="mode")

parser_csv = subparsers.add_parser('csv', help='Generate CSV output')
parser_csv.add_argument('-k', '--key', action='store_true', default=False,
                        help='Show the JIRA issue key in the table cell (default behaviour)')
parser_csv.add_argument('-t', '--title', action='store_true', default=False,
                        help='Show the JIRA issue title in the table cell (can combine with -k)')
parser_csv.add_argument('--no-url', action='store_true', default=False,
                        help='Do not include hyperlinks in CSV output')
parser_csv.add_argument('-w', '--wbs', default=DEFAULT_WBS, help='Limit results by WBS')
parser_csv.set_defaults(func=generate_txt)

parser_tab = subparsers.add_parser('tab', help='Generate tabular output')
parser_tab.add_argument('-k', '--key', action='store_true', default=False,
                        help='Show the JIRA issue key in the table cell (default behaviour)')
parser_tab.add_argument('-t', '--title', action='store_true', default=False,
                        help='Show the JIRA issue title in the table cell (can combine with -k)')
parser_tab.add_argument('--no-url', action='store_true', default=False,
                        help='Do not include hyperlinks in CSV outputput')
parser_tab.add_argument('-w', '--wbs', default=DEFAULT_WBS, help='Limit results by WBS')
parser_tab.set_defaults(func=generate_txt)

parser_dot = subparsers.add_parser('dot', help='Generate GraphViz output',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent('''
    Generate a graph of LSST DLP JIRA project in GraphViz dot format.

    To export to e.g. SVG, pipe to the dot utility:

        dlp-graph | dot -T svg > foot.svg

    There are other dot output formats, but SVG is particularly useful in that it
    can be loaded directly by most web browsers, which lets you follow the links
    embedded in the graph.
    ''')
)
parser_dot.add_argument('-w', '--wbs', default=DEFAULT_WBS, help='Limit results by WBS')
parser_dot.set_defaults(func=generate_dot)

parser_serve = subparsers.add_parser('serve', help='Serve DLP project summaries by HTTP')
parser_serve.add_argument('--host', default='0.0.0.0', help='Hostname on which to listen')
parser_serve.add_argument('--port', default=8080, type=int, help='Port on which to listen')
parser_serve.set_defaults(func=run_server)

parser_sanity = subparsers.add_parser('sanity', help='Check DLP project for consistency')
parser_sanity.add_argument('-w', '--wbs', default=DEFAULT_WBS, help='Limit results by WBS')
parser_sanity.set_defaults(func=check_sanity)

if __name__ == "__main__":
    opts = parser.parse_args()
    opts.func(opts)
