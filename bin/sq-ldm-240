#!/usr/bin/env python

from __future__ import print_function

# standard dependencies
import os
import csv
import sys
import argparse
import textwrap
from collections import OrderedDict

# PyPI dependencies
from jira import JIRA   # jira API python module
import tabulate         # used to generate tables

# in-house modules
import lsst.sqre.jirakit as jirakit  # helper code

debug = os.getenv("DM_SQUARE_DEBUG")

JIRA_SERVER = "https://jira.lsstcorp.org"

# argument parsing and default options

parser = argparse.ArgumentParser(
    prog='sq-ldm-240',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent('''

    Generate LDM-240 style tables from the LSST DLP JIRA project

    To import into excel, redirect output to a file:

        sq-ldm-240 > foo.txt

    And then import it in excel as a text file, specifying the
    pipe character (|) as the separator.

    '''),
    epilog='Part of jirakit: https://github.com/lsst-sqre/sqre-jirakit'
)

parser.add_argument('-s', '--server',
                    default=JIRA_SERVER,
                    help='JIRA server URL')

parser.add_argument('-k', '--key',
                    action='store_true',
                    default=False,
                    help='Show the JIRA issue key in the table cell (default behaviour)')

parser.add_argument('-t', '--title',
                    action='store_true',
                    default=False,
                    help='Show the JIRA issue title in the table cell (can combine with -k)')

parser.add_argument('-c', '--csv',
                    action='store_true',
                    default=False,
                    help='Output as CSV format')

parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.5')

opt = parser.parse_args()

jira_opts = {
    'server': opt.server
}

jira = JIRA(jira_opts)

project = jira.project('DLP')

# Generate a table where
# - the columns are cycles (aka semesters) [picked from fixVersion]
# - the rows are WBS units [picked from customfield_10500]
# - the cells are either ticket keys or titles or ...

cycles = jirakit.cycles()
if debug: print(cycles)

def makeRow(wbs, cycles, blank=None):
    row = OrderedDict()
    row['WBS'] = wbs
    for cycle in cycles:
        row[cycle] = blank
    return row

milestones = jira.search_issues('project = DLP AND issuetype = Milestone ORDER BY WBS ASC, fixVersion DESC',
                                maxResults=1000)

table = []
for milestone in milestones:
    issue = jira.issue(milestone)
    #    if debug: print(milestone)

    # Get the release associated with this milestone
    if not issue.fields.fixVersions:
        print('No release assigned to', issue.key, file=sys.stderr)
        continue

    cyc = issue.fields.fixVersions[0].name

    if issue.fields.customfield_10500:
        WBS = issue.fields.customfield_10500
    else:
        WBS = 'None'

    row = makeRow(WBS, cycles, "" if opt.csv else "-")

    if opt.title and opt.key:
        row[cyc] = milestone.key + ': ' + milestone.fields.summary
    elif opt.title:
        row[cyc] = milestone.fields.summary
    else:
        row[cyc] = milestone.key

    # In CSV mode we want to include a URL to the actual issue
    if opt.csv:
        row[cyc] = '=HYPERLINK("{}","{}")'.format(JIRA_SERVER + "/browse/" + milestone.key,
                                              row[cyc])

    table.append(row)

if opt.csv:
    writer = csv.DictWriter(sys.stdout, fieldnames=table[0].keys())
    writer.writeheader()
    writer.writerows(table)
else:
    print(tabulate.tabulate(table, headers='keys', tablefmt='pipe'))
